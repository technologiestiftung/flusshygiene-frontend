# This workflow will do a clean install of node dependencies, build the source code and run tests
name: Node.js CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    env:
      CI: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      - run: npm ci
      - run: npm run build --if-present

  release:
    name: semantic-release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: |
          # run semantic-release in hacky mode
          # clean out deps so semantic-release doesn't fail
          jq -c '{ name, version }' package.json > tmp.json && mv tmp.json package.json
          rm package-lock.json
          npm i semantic-release @technologiestiftung/semantic-release-config -D
          npx semantic-release --ci
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
